#summary SQL queries executed by the connector
#labels Phase-Deploy,UnderConstruction

= Introduction =

Due to the constraints of the Livelink API, all queries have a table correlation named `a` appended to the table expression, and all queries must have a where clause. Values specified at runtime are shown using the SQL parameter synax `:parameter`. Many of the these parameters are taken from the connector properties of the same name, e.g., `:includedLocationNodes` is the Items to Index property name.

= Configuration =

  # Determine the database type. If the servtype property is not configured, then the following two queries are run to determine whether Livelink is backed by Oracle or SQL Server.
{{{
select 42 from KDual a where 1=1

select 42 from dual a where 1=1
}}}
  # If Items to Index are specified or hidden items are not to be indexed, ensure that the DTreeAncestors table is not empty. The first query is used with Oracle, and the second with SQL Server.
{{{
select DataID from DTreeAncestors a where rownum = 1

select TOP 1 DataID from DTreeAncestors a where 1=1
}}}
  # If Items to Index are specified, ensure that at least one of the items to index appears in the DTreeAncestors table.
{{{
select min(ModifyDate) as minModifyDate 
from DTree a
where DataID in (select DataID from DTreeAncestors where AncestorID in (:ancestorNodes)) 
    or DataID in (:includedLocationNodes)
}}}
  # If Items to Index are specified or hidden items are not to be indexed, ensure that the DTreeAncestors table contains everything in the Enterprise workspace. The first query is used with Oracle, and the second with SQL Server.
{{{
select DataID
from DTree a 
where not exists (select DataID from DTreeAncestors where DataID = a.DataID and AncestorID = :enterpriseID) 
    and OwnerID = :enterpriseVolumeID and DataID <> :enterpriseID and rownum = 1

select TOP 1 DataID
from DTree a 
where not exists (select DataID from DTreeAncestors where DataID = a.DataID and AncestorID = :enterpriseID) 
    and OwnerID = :enterpriseVolumeID and DataID <> :enterpriseID
}}}

= Authorization =

  # Checks whether the search user has permission for the items with the given object IDs. The optional conditions correspond to exclusions in the traversal. The first optional condition excludes the Undelete workspace. The second optional condition excludes the workflow volume. The third optional condition excludes hidden items, and it has nested optional conditions if Items to Index are specified.
{{{
select DataID, PermID from WebNodes a where DataID in (:objectIDs)
    [ and ParentID <> :undeleteVolumeID ]
    [ and OwnerID <> :workflowVolumeID ]
    [ and Catalog <> 2
      and DataID not in (select Anc.DataID
                         from DTreeAncestors Anc join DTree T on Anc.AncestorID = T.DataID
                         where Anc.DataID = a.DataID
                             and T.Catalog = 2
                             [ and Anc.AncestorID not in (:includedLocationNodes)
                               and Anc.AncestorID not in (select AncestorID
                                                          from DTreeAncestors
                                                          where DataID in (:ancestorNodes))
                             ]
                        )
    ]
}}}
  # Determines the Undelete and workflow volume IDs. The optional condition checks the excluded object IDs for the found volume ID.
{{{
select DataID, PermID from DTree a where SubType = :volumeSubType
    [ and DataID in (:excludedLocationNodes) ]
}}}

= Traversal =

*Under Construction*