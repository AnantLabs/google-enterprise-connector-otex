#summary Advanced configuration for the Livelink connector
#labels Featured,Phase-Deploy

<h1>Configure the connectorInstance.xml file</h1>

This page describes the advanced configuration properties in connectorInstance.xml.

<wiki:toc max_depth="3" />

== Prepare to edit connectorInstance.xml ==

The connector instance and the connectorInstance.xml file are interdependent. You cannot edit the connectorInstance.xml file until you create a connector instance, but you do not want to index content until you have edited the file. If you have already created a connector instance and need to edit the advanced configuration properties, then you may need to reset the connector traversal.

To create a new connector instance, edit connectorInstance.xml, and then start indexing content:

    # In the GSA Admin Console, go to the Connectors page and add a connector instance.
    # On the Add Connector page, you need to disable the traversal. There are two ways of doing this:
        * In GSA 6.2, you can select the *Disable traversal* check box.
        * In earlier versions, you can select a schedule from 1:00 AM to 1:00 AM.
    # Click the *Save Configuration* button.
    # Edit the connectorInstance.xml file in a text editor. The file is located in your Google connectors installation tree under Tomcat/webapps/connector-manager/connectors/!Livelink_Enterprise_Server/_connector-name_.
    # Edit the connector in the Admin Console, and enable the traversal:
        * In GSA 6.2, you can deselect the *Disable traversal* check box.
        * In earlier versions, you can select a schedule from 12:00 AM to 12:00 AM, or any non-empty interval.
    # Click the *Save Configuration* button.

To edit connectorInstance.xml for an existing connector instance, and then reset the traversal:

    # Edit the connectorInstance.xml file in a text editor. The file is located in your Google connectors installation tree under Tomcat/webapps/connector-manager/connectors/!Livelink_Enterprise_Server/_connector-name_.
    # In the GSA Admin Console, go to the Connectors page and click the Edit link for the connector instance.
    # Click the *Save Configuration* button. You do not need to make any changes on the page.
    # Click the Reset link for the connector instance, and then click OK in the popup dialog.

== Default connectorInstance.xml file ==

The default configuration file looks like this:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
    <!-- EDIT THIS BEAN DEFINTION WITH CUSTOM PROPERTY VALUES -->
    <bean id="Livelink_Enterprise_Server"
          class="com.google.enterprise.connector.otex.LivelinkConnector"
          parent="Livelink_Enterprise_Server_Defaults" 
          dependency-check="all" scope="prototype">

        <!-- SET CUSTOM PROPERTY VALUES HERE -->

    </bean>

    <!-- EDIT THIS BEAN DEFINTION WITH CAUTION -->
    <bean id="authenticationManager"
          class="com.google.enterprise.connector.otex.LivelinkAuthenticationManager"
          scope="prototype"/>
</beans>
}}}

== Editing the file ==

The default values of the properties can be modified by inserting
the modified value into the file below the following line:
{{{
        <!-- SET CUSTOM PROPERTY VALUES HERE -->
}}}

For example, to set the windowsDomain property to "example", you
would add the following XML `property` element to the file:
{{{
        <!-- SET CUSTOM PROPERTY VALUES HERE -->
        <property name="windowsDomain" value="example"/>
}}}

The changes will take effect when you restart Tomcat or edit and
save the connector configuration in the GSA Admin Console.

=== Map and list properties ===

In the cases where the property values are maps or lists, you can copy
the default values and add or remove entries. If you only want to add
new entries, it is simpler to use `merge="true"`. For example, to add
an entry to use Livelink /open URLs for documents, you can use the
following:

{{{
<property name="displayPatterns">
    <map merge="true">
        <entry key="144" value="/open/{0}" />
    </map>
</property>
}}}

== Configuration properties ==

The following table describes the configuration properties, the
equivalent Livelink properties, the possible values, and the
default value.

=== Connection Properties ===

==== connection ====
    The database connection to use.
    
    <em>Livelink API:</em> <tt>connection</tt> parameter.
    
    If the value is empty the default database connection, as
    specified in the opentext.ini file, will be used.
    
    <em>Default value:</em>
    {{{
    <property name="connection" value=""/>
    }}}

==== windowsDomain ====
    The Windows domain to authenticate users against.

    <em>Livelink API:</em> <tt>userName</tt> parameter.

    The Windows domain is prepended to the username of search users
    for authentication. This value is not used for the Livelink
    system administrator or the traversal user. This parameter will
    always be used, whether authentication is done via HTTP
    tunneling or not.

    <em>Default Value:</em>
    {{{
    <property name="windowsDomain" value=""/>
    }}}

=== HTTP Tunneling Properties ===

==== verifyServer ====
    Specifies whether to verify the Web server's certificate when
    the Use HTTPS property is set to true.

    <em>Livelink API:</em> <tt>!VerifyServer</tt> attribute in <tt>config</tt> parameter.

    <em>Default Value:</em>
    {{{
    <property name="verifyServer" value="false"/>
    }}}

==== caRootCerts ====
    The root certificates to use when verifying the Web server's
    certificate.

    <em>Livelink API:</em> <tt>CARootCerts</tt> attribute in <tt>config</tt> parameter.

    This property is used only if HTTP tunneling is enabled
    (through the livelinkCgi property), and the https and
    verifyServer properties are both set to true. Each value in the
    list may be either a Base64 encoded X.509 format certificate or a
    path to a directory on the Connector Manager host which contains
    one or more files containing such certificates.

    <em>Default Value:</em>
    {{{
    <property name="caRootCerts">
        <list></list>
    </property>
    }}}

=== Separate Authentication Properties ===

==== authenticationConnection ====
    The database connection to use.

    <em>Livelink API:</em> <tt>connection</tt> parameter.

    If the value is empty the default database connection, as
    specified in the opentext.ini file, will be used.

    <em>Default Value:</em>
    {{{
    <property name="authenticationConnection" value=""/>
    }}}

==== authenticationVerifyServer ====
    Specifies whether to verify the Web server's certificate when
    the authenticationHttps property is set to true.

    <em>Livelink API:</em> <tt>!VerifyServer</tt> attribute in <tt>config</tt> parameter.

    <em>Default Value:</em>
    {{{
    <property name="authenticationVerifyServer" value="false"/>
    }}}

==== authenticationCaRootCerts ====
    The root certificates to use when verifying the Web server's
    certificate.

    <em>Livelink API:</em> <tt>CARootCerts</tt> attribute in <tt>config</tt> parameter.

    This property is used only if HTTP tunneling is enabled
    (through the authenticationLivelinkCgi property), and the
    authenticationHttps and authenticationVerifyServer properties are
    both set to true. Each value in the list may be either a Base64
    encoded x.509 format certificate or a path to a directory on the
    Connector Manager host which contains one or more files containing
    such certificates.

    <em>Default Value:</em>
    {{{
    <property name="authenticationCaRootCerts">
        <list></list>
    </property>
    }}}

=== Indexing Properties ===

==== startDate ====
    The earliest modification date for items to be indexed.

    The repository is traversed in modification date order,
    beginning with the earliest item. When a start date is specified,
    the indexing begins with items modified on or after the start
    date. Items with an earlier modification date will not be
    indexed.

    Start dates may be specified as date/time values using the
    format "YYYY-mm-dd hh:mm:ss" or as date values using the
    format "YYYY-mm-dd". For example, valid startDate values
    are "2007-01-01 01:30:00" or "2007-01-01".

    If the value is empty or cannot be parsed, all items will be
    indexed.

    <em>Default Value:</em>
    {{{
    <property name="startDate" value=""/>
    }}}

==== publicContentUsername ====
    Indexed items that are accessible by this Livelink user are
    marked as public documents. Public documents do not require
    authentication or authorization.

    If the value specified for this property matches the traversal
    username (whether explicitly specified, or implicitly, as the
    system administrator), then all indexed content will be marked as
    public without checking permissions.

    <b>Note: This property bypasses Livelink
    security.</b> Items that are made public are shown in the search
    results without authentication or authorization. The content of
    these items is available through the "Cached" and "Text Version"
    links. These items are not accessible within Livelink without
    authentication unless you have a Livelink customization that makes
    this possible.

    <em>Default Value:</em>
    {{{
    <property name="publicContentUsername" value=""/>
    }}}

==== publicContentDisplayUrl ====
    Specifies the Livelink URL which should be used in search
    results which link to public documents.

    If the value is empty, the value of the displayUrl property will
    be used.

    <em>Default Value:</em>
    {{{
    <property name="publicContentDisplayUrl" value=""/>
    }}}

==== excludedNodeTypes ====
    Specifies the node types that you want to exclude from
    indexing. Excluding a node type means that no items of that type
    are indexed.

    A comma-separated list of subtype numbers, optionally enclosed
    by braces. This value may be copied from the
    <tt>!ExcludedNodeTypes</tt> parameter in the
    `[LivelinkExtractor]` section of the opentext.ini file.

    <em>Default Value:</em>
    {{{
    <property name="excludedNodeTypes"
              value="137,142,143,148,150,154,161,162,201,203,209,210,211"/>
    }}}

==== excludedVolumeTypes ====
    Specifies the volume types that you want to exclude from
    indexing. Excluding a volume type means that no volumes of that
    type or any of the items that the volumes contain are indexed.

    This property is not hierarchical. Only items whose OwnerID
    matches a volume of the excluded type will be excluded. Items in
    non-excluded subvolumes will be indexed. To exclude entire
    hierarchies, specify the items to be excluded by object ID rather
    than type, using the excludedLocationNodes property.

    By default, the Undelete workspace (subtype 402) is not
    excluded. If the Undelete workspace is excluded, either here or by
    object ID in excludedLocationNodes, then previously indexed
    documents now in the Undelete workspace will be excluded by the
    authorization checks.

    A comma-separated list of volume type numbers, optionally
    enclosed by braces. If this property is not specified, no volume
    types are excluded from indexing. This value may be copied
    from the <tt>!ExcludedVolumeTypes</tt> parameter in the
    `[LivelinkExtractor]` section of the opentext.ini file.

    <em>Default Value:</em>
    {{{
    <property name="excludedVolumeTypes" value="148,161,162"/>
    }}}

==== excludedLocationNodes ====
    Specifies the IDs of the nodes that you want to exclude from
    indexing. Excluding a node means that it is not indexed, and
    if it is a container, none of the items it contains are
    indexed.

    Excluding nodes requires the use of the DTreeAncestors table in
    Livelink, which in turn requires that the Livelink Recommender
    agent be enabled. The latest monthly Livelink patches are
    recommended.

    A comma-separated list of object IDs, optionally enclosed by
    braces.

    <em>Default Value:</em>
    {{{
    <property name="excludedLocationNodes" value=""/>
    }}}

==== includedExtendedData ====
    A map of the !ExtendedData attributes that are indexed and used
    to construct the HTML content. Each subtype can have different
    attributes indexed.

    The map contains keys that consist of comma-separated subtype
    integers. The special string "default" is not supported. These are
    mapped to a comma-separate list of attribute names, which should
    appear in the !ExtendedData field of the given subtypes.

    <em>Default Value:</em>
    {{{
    <property name="includedExtendedData">
        <map>
            <entry key="130,134" value="Content" />
            <entry key="202" value="Mission,Goals,Objectives,Initiatives" />
            <entry key="206" value="Instructions,Comments" />
            <entry key="208" value="Headline,Story" />
            <entry key="218" value="Instruction,Questions" />
        </map>
    </property>
    }}}

==== includedObjectInfo ====
    The object info attributes that you want to index.

    A comma-separated list of attribute names. For a list of
    object info attributes, see "!ObjectInfo Attributes" in the
    <em>Livelink API Developer's Reference Guide</em> from Open Text.

    <em>Default Value:</em>
    {{{
    <property name="includedObjectInfo" value="" />
    }}}

==== includedVersionInfo ====
    The version info attributes that you want to index.

    A comma-separated list of attribute names. For a list of
    version info attributes, see "!VersionInfo Attributes" in the
    <em>Livelink API Developer's Reference Guide</em> from Open Text.

    <em>Default Value:</em>
    {{{
    <property name="includedVersionInfo" value="" />
    }}}

==== includedCategories ====
    The IDs of the categories that you want to index. Including a
    category means that when that category is applied to an item, the
    attributes are indexed as metadata for that item.

    A comma-separated list of object IDs for categories, and/or one of
    the following special strings:
    <dl>
    <dt><tt>all</tt>
    <dd>All categories that are applied to the item are indexed.</dd>
    <dt><tt>searchable</tt>
    <dd>Only attributes that have the <b>Show in Search</b> parameter
    enabled, from each of the categories that are applied to the item,
    are indexed.  Otherwise, all attributes of the categories are indexed.</dd>
    <dt><tt>name</tt>
    <dd>The category name will be indexed as the value of a
    "Category" property.</dd>
    <dt><tt>none</tt>
    <dd>No attributes from any of the categories that are applied to
    the item are indexed. This value turns off the indexing of
    categories.</dd>

    Specifying an empty string is the same as "all". 

    <em>Default Value:</em>
    {{{
    <property name="includedCategories" value="all,searchable" />
    }}}

==== excludedCategories ====
    The IDs of the categories that you do not want to index.
    Excluding a category means that when that category is applied to
    an item, the attributes are <em>not</em> indexed as metadata
    for that item.

    A comma-separated list of object IDs for categories, or one of
    the following special strings:
    <dl>
    <dt><tt>all</tt>
    <dd>All attributes from each of the categories that are applied to
    the item are excluded. This value turns off the indexing of
    categories.</dd>
    <dt><tt>none</tt>
    <dd>No attributes from any of the categories that are applied to
    the item are excluded. </dd>

    Specifying an empty string is the same as "none".

    <em>Default Value:</em>
    {{{
    <property name="excludedCategories" value="" />
    }}}

==== showHiddenItems ====
    Specifies whether hidden items, or their children, are shown
    in the search results. This property is used for authorization,
    and not for indexing.

    Excluding hidden items, by setting this property to false,
    requires the use of the DTreeAncestors table in Livelink, which in
    turn requires that the Livelink Recommender agent be enabled. The
    latest monthly Livelink patches are recommended. Setting
    [AdvancedConfiguration#useDTreeAncestors useDTreeAncestors]
    to <tt>false</tt> is not supported with this configuration.

    One of the following values:
    <dl>
    <dt><tt>{}</tt> or <tt>false</tt>
    <dd>Do not show hidden items.
    <dt><tt>{'ALL'}</tt> or <tt>true</tt>
    <dd>Show all hidden items.</dd>

    This value may be copied from the <tt>!ShowHiddenItems</tt>
    parameter in the `[Explorer]` section or in the
    `[Atlas]` section of the opentext.ini file. 

    Subtype numbers in the list are silently accepted, but ignored.

    <em>Default Value:</em>
    {{{
    <property name="showHiddenItems" value="true" />
    }}}

==== trackDeletedItems ====
    Specifies whether to track items that have been deleted from
    the Livelink repository, so that those items may also be deleted
    from the Google search index.

    For optimal performance tracking deleted items, the Livelink
    system administrator should add a database index for the AuditID,
    !AuditDate, and EventID columns of the DAuditNew table of the
    Livelink backend database.

    Deleting documents from a connector instance that only indexes
    a small portion of the repository is inefficient. To reasonably
    manage GSA licensing limits, you might consider disabling GSA
    deletes for those instances, while leaving them enabled for a
    connector instance that indexes the entire repository.

    One of the following values:
    <dl>
    <dt><tt>false</tt>
    <dd>Do not track deleted items.
    <dt><tt>true</tt>
    <dd>Track deleted items, sending delete notifications to the
    Google Search Appliance.</dd>

    <em>Default Value:</em>
    {{{
    <property name="trackDeletedItems" value="true" />
    }}}

==== displayPatterns ====
    A map of the relative display URLs used in search results.
    Each subtype can have a different relative URL. This URL suffix is
    combined with the value of the displayUrl property to form a
    complete URL for each item in the search results.

    The map contains keys that consist of comma-separated subtype
    integers, or the special string "default". These are mapped to a
    <tt>java.text.!MessageFormat</tt> pattern. There are four
    parameters that can be used in each pattern, delimited by braces:
    <dl>
    <dt> 0
    <dd> The object ID.</dd>
    <dt> 1
    <dd> The volume ID.</dd>
    <dt> 2 
    <dd> The subtype.</dd>
    <dt> 3
    <dd> The display action, which varies by subtype and is configured
    by the displayActions property.</dd>
    <dt> 4
    <dd> The filename with extension, based on the name of the item
    and the version filename extension. Intended for use
    with <tt>doc.Fetch</tt> URLs (see the example below).</dd>

    To fetch documents directly from the search results, instead of
    linking to the Overview or Properties page, add one of the following
    entries to the map:
    {{{
    <entry key="144" value="/open/{0}" />
    }}}
    or
    {{{
    <entry key="144" value="/{0}/{4}?func=doc.Fetch&amp;nodeid={0}&amp;viewType=1" />
    }}}

    <em>Default Value:</em>
    {{{
    <property name="displayPatterns">
        <map>
            <entry key="141" value="?func=llworkspace" />
            <entry key="142"
                   value="?func=ll&amp;objtype=142&amp;objAction=browse" />
            <entry key="default"
                   value="?func=ll&amp;objId={0}&amp;objAction={3}" />
        </map>
    </property>
    }}}

==== displayActions ====
    A map of the display actions used in search results.
    Each subtype can have a different action.

    The map contains keys that consist of comma-separated subtype
    integers, or the special string "default". These are mapped to
    Livelink action names, such as "browse" or "overview". If the map
    contains an entry mapping "144" (documents) to "overview", and the
    Livelink server is version 9.5 or earlier, the "properties"
    action is used instead.

    <em>Default Value:</em>
    {{{
    <property name="displayActions">
        <map>
            <entry key="0,202,136" value="browse" />
            <entry key="130,134,215" value="view" />
            <entry key="144" value="overview" />
            <entry key="204" value="BrowseTaskList" />
            <entry key="206" value="BrowseTask" />
            <entry key="207" value="ViewChannel" />
            <entry key="208" value="ViewNews" />
            <entry key="218" value="OpenPoll" />
            <entry key="default" value="properties" />
        </map>
    </property>
    }}}

==== useDTreeAncestors ====
   Specifies whether to use the DTreeAncestors table to get hierarchy
   information. Using the database table is faster, but the table may be
   empty or incomplete.

   Due to performance issues, Open Text has sometimes recommended turning off the 
   Recommender agent. There have also been a number of bugs that led to missing entries. Many 
   of the performance issues and other bugs have been fixed in the latest monthly patches, but it 
   would be nice not to rely on DTreeAncestors since many deployments have incomplete or missing 
   data.

    If the use of DTreeAncestors is disabled, then a [AdvancedConfiguration#genealogist Genealogist]
    implementation class will be used to get hierarchy information.

    One of the following values:
    <dl>
    <dt><tt>false</tt>
    <dd>Use multiple, separate database queries to get information about the hierarchy.
    <dt><tt>true</tt>
    <dd>Use the DTreeAncestors table.</dd>

    <em>Default Value:</em>
    {{{
    <property name="useDTreeAncestors" value="true" />
    }}}

=== Other Properties ===

==== tryLowercaseUsernames ====
    A hack to try using a lowercase version of the supplied
    username for authorizations. If <tt>true</tt>, the lowercase
    form of the username will be tried first, and if authorization
    fails, the original form of the username will be tried.
    If <tt>false</tt>, only the original form of the username will
    be tried.

    <em>Default Value:</em>
    {{{
    <property name="tryLowercaseUsernames" value="false"/>
    }}}

==== contentHandler ====
    The name of the <tt>!ContentHandler</tt> implementation
    class to use when retrieving document content for indexing.

    There are four <tt>!ContentHandler</tt> implementations in the
    <tt>com.google.enterprise.connector.otex</tt> package:
    <dl>
    <dt><tt>!ByteArrayContentHandler</tt>
    <dd> The fastest implementation, but not a very scalable one
    because it maintains the entire content in a byte array.
    <dt><tt>!FileContentHandler</tt>
    <dd> Stores the content in a temporary file, but performs very
    badly for files larger than 10 MB.
    <dt><tt>HttpURLContentHandler</tt>
    <dd> Retrieves the content directly from the Livelink server using
    an <tt>HttpURLConnection</tt>. Performance is inexplicably
    disappointing, in line with but consistently 1-1/2 to 3 times slower
    than the others.
    <dt><tt>!PipedContentHandler</tt>
    <dd> Uses a pipe to match the in-memory performance
    characteristics of the byte array handler without the scalability
    issues. Combines consistently good performance with small memory
    consumption. However, this implementation has a potential thread
    deadlock problem seen in development (though not in production).</dd>

    <em>Default Value:</em>
    {{{
    <property name="contentHandler"
              value="com.google.enterprise.connector.otex.FileContentHandler"/>
    }}}

==== servtype ====
    The database server type.

    Valid values begin with "MSSQL" or "Oracle". Sybase is not
    supported. This value may be copied from the <tt>servtype</tt>
    parameter in the
    `[dbconnection:`<em>connection_name</em>`]` section of
    the opentext.ini file. If the value is empty the database type will
    be determined automatically.

    <em>Default Value:</em>
    {{{
    <property name="servtype" value=""/>
    }}}

==== genealogist ====
    The name of the <tt>Genealogist</tt> implementation
    class to use to lookup folder hierarchy information when
    [AdvancedConfiguration#useDTreeAncestors useDTreeAncestors]
    is <tt>false</tt>.

    There are three <tt>Genealogist</tt> implementations in the
    <tt>com.google.enterprise.connector.otex</tt> package:
    <dl>
    <dt><tt>Genealogist</tt>
    <dd> The basic implementation, which uses one query for each item in a batch for each
    level of the hierarchy.
    <dt><tt>!HybridGenealogist</tt>
    <dd> Uses a single query to get the parents of all items in a batch, and then 
    uses one query for each item for each additional level of the hierarchy.
    <dt><tt>!BatchGenealogist</tt>
    <dd> Uses one query for each level of the hierarchy.

    <em>Default Value:</em>
    {{{
    <property name="genealogist"
              value="com.google.enterprise.connector.otex.BatchGenealogist"/>
    }}}

=== Other Beans ===

==== authenticationManager ====
    The <tt>class</tt> attribute of the <tt>authenticationManager</tt>
    bean specifies the <tt>!AuthenticationManager</tt> instance to use
    when authenticating before providing access to content.

    There are three <tt>!AuthenticationManager</tt> implementations in the
    <tt>com.google.enterprise.connector.otex</tt> package:
    <dl>
    <dt><tt>!LivelinkAuthenticationManager</tt>
    <dd>This implementation authenticates by using the
    provided credentials to log in to Livelink.
    <dt><tt>!NoOpAuthenticationManager</tt>
    <dd><b>Note: This value bypasses Livelink security.</b> 
    This implementation authenticates all users. An
    optional "sharedPassword" property may be
    configured containing a password which must be
    present in the credentials.
    <dt><tt>!LdapAuthenticationManager</tt>
    <dd>This implementation uses the provided credentials
    to authenticate against an LDAP server. Two
    properties are required:</dd>
        <dl>
        <dt><tt>providerUrl</tt>
        <dd>The LDAP or LDAPS URL for the directory server.
        <dt><tt>securityPrincipalPattern</tt>
        <dd>The DN to use for authentication. A single
        <tt>java.text.!MessageFormat</tt>
        parameter should be supplied;
        the provided username will be substituted
        there. For example:
        <pre>uid={0},ou=people,dc=example,dc=com</pre></dd>

    <em>Default Value:</em>
    {{{
    <bean id="authenticationManager"
          class="com.google.enterprise.connector.otex.LivelinkAuthenticationManager"
          scope="prototype"/>
    }}}